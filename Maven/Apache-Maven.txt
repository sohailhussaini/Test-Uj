Instalation:

1) Install JDK latest version. 
	Copy the folder path from C:/program files/java
	Set path, right click on my computer-->properties-->new-->add name: JAVA_HOME & path:C:/program files/java
		in below vairable click on path and add --> ;C:/program files/java/bin
2) Download apache maven and copy the path
	Set path, right click on my computer-->properties-->new-->add name: M2_HOME & path:C:/program files/M2
		in below vairable click on path and add --> ;C:/program files/M2/bin

3) To setup required plugin 
- mvn archetype:generate  (command in CMD)   (just like git init)
	type default project number shown:1586
	type default version number shown : 8
	Group id --> Type devops(or any name)     - this will be the build name
	artifact id --> Tpype Project-1
	Snapshot (ie., version name) --> keep deafult
	Package devops --> keep default
	Type Y








In Maven there are 3 repositories
1 - Local repository  (C:\Users\DELL\.m2)
2 - Central repository  -->https://repo.maven.apache.org/maven2/
3 - Remote repository  


To download the cmd mvn archetype:generate data in a file, use
- mvn archetype:generate > test-file


- Important notes :    This is used to select which type of project which will be suitable to our project. Ideally Developers will select all these.
If not then devops engg has to create project with the suitable project plugins and folder structure. Copy this folders and
move the folders to github and have the link handy for jenkins automation of building process.
Developers also will use the same github link and add there code files in the same repository. Once all are done, then 
for the relase time, all these files will go for build process thru maven.




To create a simple java project using maven, you need to open command prompt and
Prasad +91-8802399967 devopstraining2015@gmail.com
run the archetype:generate command of mvn tool.
Syntax
The syntax to generate the project architecture is given below:
mvn archetype:generate -DgroupId=groupid -DartifactId=artifactid
-DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=booleanValue
Example:2
The example to generate the project architecture is given below:
mvn archetype:generate -DgroupId=com.javatpoint -DartifactId=CubeGeneratorWeb
-DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false


- mvn test

- mvn compile

- mvn package    --- to build the project
 
- mvn clean      -- to remove test cases or target folder from the project

- mvn verify

- mvn deploy

- mvn dependency:tree




:::::::::::::::::::::::::::::::::::::::::::::::::Creating Sample Project:::::::::::::::::::::::::::::::::::::::::::::::

Link :   https://mkyong.com/maven/how-to-create-a-web-application-project-with-maven/


!) creating project : maven-archetype-webapp

> mvn archetype:generate -DgroupId=com.mkyong.web -DartifactId=java-web-project -DarchetypeArtifactId=maven-archetype-webapp -DinteractiveMode=false

2) changing POM file with required dependency

<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 
		 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.mkyong.web</groupId>
    <artifactId>java-web-project</artifactId>
    <packaging>war</packaging>
    <version>1.0-SNAPSHOT</version>
    <name>java-web-project Maven Webapp</name>
    <url>http://maven.apache.org</url>
    <properties>
        <!-- https://maven.apache.org/general.html#encoding-warning -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.8</maven.compiler.source>
        <maven.compiler.target>1.8</maven.compiler.target>
        <spring.version>5.1.0.RELEASE</spring.version>
    </properties>

    <dependencies>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-test</artifactId>
            <version>${spring.version}</version>
        </dependency>

        <!-- logging , spring 5 no more bridge, thanks spring-jcl -->
        <dependency>
            <groupId>ch.qos.logback</groupId>
            <artifactId>logback-classic</artifactId>
            <version>1.2.3</version>
        </dependency>

        <!-- junit 5, unit test -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>5.3.1</version>
            <scope>test</scope>
        </dependency>

        <!-- unit test -->
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-library</artifactId>
            <version>1.3</version>
            <scope>test</scope>
        </dependency>

        <!-- for web servlet -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <version>3.1.0</version>
            <scope>provided</scope>
        </dependency>

        <!-- Some containers like Tomcat don't have jstl library -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
            <version>1.2</version>
            <scope>provided</scope>
        </dependency>

    </dependencies>
    <build>
        <finalName>java-web-project</finalName>
        <plugins>
            <!-- http://www.eclipse.org/jetty/documentation/current/jetty-maven-plugin.html -->
            <plugin>
                <groupId>org.eclipse.jetty</groupId>
                <artifactId>jetty-maven-plugin</artifactId>
                <version>9.4.12.v20180830</version>
            </plugin>

            <!-- Default is too old, update to latest to run the latest Spring 5 + jUnit 5 -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <version>2.22.0</version>
            </plugin>

            <!-- Default 2.2 is too old, update to latest -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-war-plugin</artifactId>
                <version>3.2.2</version>
            </plugin>

        </plugins>
    </build>

</project>




3) Display the project dependencies.

 > mvn dependency:tree
 
 This will download all the dependencies which are mentioned in the POM file
 
 
 4) check with the above link for steps.
 
 
 ::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::





















