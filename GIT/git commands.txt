- git add {file_name}

- git add .  

- git commit -m "your comments"

- git commit -am "modifed files"   -- adds and commit only modified files directly using single file.Cannot be used for
 new file

- git pull {or} git pull "https://github.com/sohailhussaini/Test-Uj.git"   - AlwAYS run this command first

- git push
     or
  git push origin master
     or
  git push origin "https://github.com/sohailhussaini/Test-Uj.git" master

- git revert      - to revert from local repo to staging

- git revert --mixed    - to push back the file from staging to workspace area

- git status

- git log
  git log -1
  git log -1
  git log --untill yyyy-mm-dd
  git log --since yyyy-mm-dd
  git log {commit id or first 7 letters of CID}

- git show
  git show CID

- git checkout    - show in which branch you are
  git chekout -b {branch name}  - to create and switch to the new branch  name

- git branch {branch name}    - to create a new branch
  git branch -d {branch name}    - to delete branch 

- git merge branch1   - if you are in master then, you are merging branch1 to master

- git push "https://github.com/sohailhussaini/Test-Uj.git" branch1    - to push branch1 to github as a new branch
and there you can review the code and merge it in master of github by adding pull and merge request in git hub

- git push -d orgin {branch name}     - to delete branch in github from gitbash

- git blame my_file     — See who changed what and when in my_file.

- git diff     — See all file changes locally. A file name can be appended to show changes for only one file

- git reflog         — Show a log of changes to the local repository’s HEAD. Good for finding lost work

- git reset --hard HEAD         — Discard staged and unstaged changes since the most recent commit

- git checkout my_commit— Discard unstaged changes since my_commit

- git revert my_commit —Undo the effects of changes in my_commit. revert makes a new commit when it undoes the changes

- git clean -n —Delete untracked files in the local working directory.
The -n flag is for a dry run where nothing is deleted.
Use the -f flag to actually remove the files.
Use the -d flag to remove untracked directories

- Add shortcuts for Git commands by adding the following aliases to your .bash_profile.
alias gs='git status '
alias ga='git add '
alias gaa='git add -A '
alias gb='git branch '
alias gc='git commit ' 
alias gcm='git commit -m '
alias go='git checkout 


Git stash :

Git stash is like temp storage area, after you add files using git add, then we can move files to stash memory

- git stash list    - show stash list if available

- git stash save "stash1"    - just like commit

- git stash show -p stash@{x}      - where x can be any stash numnber. ie., 0 is default. this is like git show command
in which it shows what is available in that stash memory


- git stash apply   -- revert the stash data back to staging area and will not delete the stash memory

- git stash apply stash@{2} - applies the stash{2} memory to staging area and will not delete the memory

- git stash pop    -- revert the stash data back to staging area and re-use the stash memory for other data

- git stash drop  - delete the first stash ie,. stash{0} data

- git stash drop stash@{2} stash@{3}  - delete data of stash{2} and stash{3}


Ignore files :

Inorder to ignore files to add or commit ie., which is not required to move to github like log files etc.
1) Create a file with name 

   vi .gitignore 

2) Mention all files names which need to ignore like b1t1 etc and save the file 
3) git add
4) git commit -m "ignore files"
5) Now if we check git status the files added in ignore file will not show in the commit list or git show, it will ignore 
even the changes are made.


Tags :

IT is used like branch which will control the versions/releases

- git tag  or git tag --list       -- show if any release or tag available

- git tag V1.1   -- V1.1 is the tag name given by us and by using this command will tag till the last commit.

- git tag tag_name  commit id        -- partail tag till commit id

- git log --oneline  or git log -1       -- to check till where the tag is created

- git push origin V1.1        - to push the tag to github. This push one tag

- git push --tags               - will push all tags available.

- git push origin -d V1.1     - top remove the tag from the githubt

- git tag -d V1.1   - to remove the tag in local memory


Rebase :
Difference b/w merge and rebase, while using merge command there will be a commit id.While using rebase there wont
 generete commit id 


- git rebase master1    -- if you are in master branch and looking to merge master1

After this check with git log --oneline, there wont be any commit id wont be avilable



git pull == merge + fetch
- git fetch    -- to pull the data from git hub and save in local repository. but it wii not add data of local file.
we need to merge 
git merge origin/Head


- git diff file1         - show diff in single file
- git diff file1 file2    - shows diff in btw 2 files
- git diff master master1   - show diff in btw 2 master


- git commit --amend -m "comments..."     - to change the last comments of commit


- git clean -f    - to delete files created in workspace of local repo



To delete files from github and local repo :

1) delete the files from  local repo
2) git status
3) git add .
4) git commit -m "deleted files"
5) git push

files will be removed from local and github












